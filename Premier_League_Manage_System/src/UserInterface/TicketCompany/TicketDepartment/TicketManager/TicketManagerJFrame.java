/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UserInterface.TicketCompany.TicketDepartment.TicketManager;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*Related to send email*/
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.util.Date;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;

/**
 *
 * @author yidia
 */
public class TicketManagerJFrame extends javax.swing.JFrame {
    
    /*Lu email在登录后打开这个界面时传入，*/
    String email = "yidianhaoranlv07@outlook.com"; 
    /**
     * Creates new form TicketManagerJFrame
     */
    public TicketManagerJFrame() {
        initComponents();
        lb_Account.setText(email);
        populateTable();
    }
    
    public TicketManagerJFrame(String email) {
        this.email = email;
        initComponents();
        lb_Account.setText(email);
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TicketManagerSplitPane = new javax.swing.JSplitPane();
        ControlPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lb_Account = new javax.swing.JLabel();
        ManageTicketJPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMatchSearch = new javax.swing.JTable();
        btnSetPrice = new javax.swing.JButton();
        btnSetAmount = new javax.swing.JButton();
        txtPrice = new javax.swing.JTextField();
        txtAmount = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));

        TicketManagerSplitPane.setDividerLocation(100);

        jLabel4.setText("Account");

        lb_Account.setText(" ");

        javax.swing.GroupLayout ControlPanelLayout = new javax.swing.GroupLayout(ControlPanel);
        ControlPanel.setLayout(ControlPanelLayout);
        ControlPanelLayout.setHorizontalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ControlPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_Account, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );
        ControlPanelLayout.setVerticalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lb_Account)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TicketManagerSplitPane.setLeftComponent(ControlPanel);

        tbMatchSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Date", "HomeTeam", "AwayTeam", "Price", "Amount", "LeftAmount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbMatchSearch);

        btnSetPrice.setText("SetPrice");
        btnSetPrice.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnSetPrice.setPreferredSize(new java.awt.Dimension(72, 23));
        btnSetPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetPriceActionPerformed(evt);
            }
        });

        btnSetAmount.setText("SetAmount");
        btnSetAmount.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnSetAmount.setPreferredSize(new java.awt.Dimension(72, 23));
        btnSetAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetAmountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ManageTicketJPanelLayout = new javax.swing.GroupLayout(ManageTicketJPanel);
        ManageTicketJPanel.setLayout(ManageTicketJPanelLayout);
        ManageTicketJPanelLayout.setHorizontalGroup(
            ManageTicketJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManageTicketJPanelLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(ManageTicketJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ManageTicketJPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(ManageTicketJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(ManageTicketJPanelLayout.createSequentialGroup()
                                .addComponent(btnSetAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtAmount))
                            .addGroup(ManageTicketJPanelLayout.createSequentialGroup()
                                .addComponent(btnSetPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(148, Short.MAX_VALUE))
        );
        ManageTicketJPanelLayout.setVerticalGroup(
            ManageTicketJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManageTicketJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addGap(40, 40, 40)
                .addGroup(ManageTicketJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSetPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ManageTicketJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSetAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(227, 227, 227))
        );

        TicketManagerSplitPane.setRightComponent(ManageTicketJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TicketManagerSplitPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TicketManagerSplitPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSetPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetPriceActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        int selectedRowIndex = tbMatchSearch.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tbMatchSearch.getModel();
        
        String date = model.getValueAt(selectedRowIndex , 0).toString();//获得选中的行的第2列的内容
        String homeTeam = model.getValueAt(selectedRowIndex , 1).toString();//获得选中的行的第2列的内容
        String awayTeam = model.getValueAt(selectedRowIndex , 2).toString();//获得选中的行的第2列的内容
        
        
        try {
                /* create jdbc connection */
                Class.forName("com.mysql.cj.jdbc.Driver");
                
                String url = "jdbc:mysql://localhost:3306/premierleague?zeroDateTimeBehavior=CONVERT_TO_NULL";
                String username = "root";
                
                String password = "abcd1234!";
                Connection connection = DriverManager.getConnection(url, username, password);
                Statement statement = connection.createStatement();
                
                /*把priceupdate到数据库*/
                String sql = "UPDATE match_info SET price = " +txtPrice.getText() + " WHERE home =\'"+homeTeam +"\'and away =\'"+awayTeam +"\'and date =\'"+date +"\'";
                int isBooked = statement.executeUpdate(sql);//executeQuery(sql)是查询  executeUpdate是删改
                
                /*2.把表`fan_match`中waiting的状态改为ordered*/
                String sqlWaitlist = "UPDATE fan_match SET price = " +txtPrice.getText() + " WHERE hometeam =\'"+homeTeam +"\' and awayteam =\'"+awayTeam +"\' and date =\'"+date +"\' and status = \'Waiting\'";
                int isBookedWaitlist  = statement.executeUpdate(sqlWaitlist);//executeQuery(sql)是查询  executeUpdate是删改
                
                if (isBooked ==1){
                    populateTable(); //Refresh table
                    JOptionPane.showMessageDialog(this, "Set price successfully.");
                }
                
                
                
                statement.close();
                connection.close();
            } catch (ClassNotFoundException | SQLException e) {
                JOptionPane.showMessageDialog(this, "You need to check before set price.");
                return;
            }
        
        
    }//GEN-LAST:event_btnSetPriceActionPerformed

    private void btnSetAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetAmountActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
                // TODO add your handling code here:
        int selectedRowIndex = tbMatchSearch.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tbMatchSearch.getModel();
        
        String date = model.getValueAt(selectedRowIndex , 0).toString();//获得选中的行的第2列的内容
        String homeTeam = model.getValueAt(selectedRowIndex , 1).toString();//获得选中的行的第2列的内容
        String awayTeam = model.getValueAt(selectedRowIndex , 2).toString();//获得选中的行的第2列的内容
        int price = Integer.parseInt(model.getValueAt(selectedRowIndex , 3).toString());//获得选中的行的第2列的内容
        int oldAmount = Integer.parseInt(model.getValueAt(selectedRowIndex , 4).toString());//获得选中的行的第2列的内容
        int newAmount = Integer.parseInt(txtAmount.getText());//获得选中的行的第2列的内容
        int leftAmount = Integer.parseInt(model.getValueAt(selectedRowIndex , 5).toString());//获得选中的行的第2列的内容
        if(newAmount<oldAmount-leftAmount){
            JOptionPane.showMessageDialog(this, "There is an error that the new amount is less than sold out amount, please change it again.");
            return;
        }
        
        try {
                /* create jdbc connection */
                Class.forName("com.mysql.cj.jdbc.Driver");
                
                String url = "jdbc:mysql://localhost:3306/premierleague?zeroDateTimeBehavior=CONVERT_TO_NULL";
                String username = "root";
                
                String password = "abcd1234!";
                Connection connection = DriverManager.getConnection(url, username, password);
                Statement statement = connection.createStatement();
                
                
                /*增加票了，处理waitlist*/
                int sendTimes = 0;
                int isBookedWaitlist =1;
                if (leftAmount==0 && (newAmount- oldAmount)>0){
                    /*1.获取表`fan_match`中waiting邮箱名单,存入ArrayList，为第3步做准备*/
                    String sqlWaitFans = "SELECT email from fan_match WHERE hometeam =\'"+homeTeam +"\' and awayteam =\'"+awayTeam +"\' and date =\'"+date +"\' and status = \'Waiting\' ORDER BY order_time LIMIT " + (newAmount- oldAmount);
                    ResultSet resultSet = statement.executeQuery(sqlWaitFans);   //搭配select使用，其他update什么的都不用
                    ArrayList<String> listWaitFans = new ArrayList<>();
                    while(resultSet.next()){
                    listWaitFans.add(String.valueOf(resultSet.getObject("email")));
                    }
                    resultSet.close();//close  搭配select使用，其他update什么的都不用
                
                    /*2.把表`fan_match`中waiting的状态改为ordered*/
                    String sqlWaitlist = "UPDATE fan_match SET status = \'Ordered\' WHERE hometeam =\'"+homeTeam +"\' and awayteam =\'"+awayTeam +"\' and date =\'"+date +"\' and status = \'Waiting\' ORDER BY order_time LIMIT " + (newAmount- oldAmount);
                    isBookedWaitlist  = statement.executeUpdate(sqlWaitlist);//executeQuery(sql)是查询  executeUpdate是删改
                    /*3.给表`fan_match`中waiting的邮箱发邮件通知有票了*/
                    /*先试试打印*/
                     for (; sendTimes < listWaitFans.size(); sendTimes++) {
                        //System.out.println(listWaitFans.get(i));
                        sendEmail(listWaitFans.get(sendTimes));
                    }
                    
                    
                    //JOptionPane.showMessageDialog(this, "");
                }
                /*把amount update到数据库*/
                int leftAmount_Fianl = newAmount + leftAmount- oldAmount-sendTimes;
                String sql = "UPDATE match_info SET price_amount = " + newAmount + ", left_amount = " + leftAmount_Fianl  + " WHERE home =\'"+homeTeam +"\'and away =\'"+awayTeam +"\'and date =\'"+date +"\'";
                int isBooked = statement.executeUpdate(sql);//executeQuery(sql)是查询  executeUpdate是删改
               
                if (isBooked ==1&&isBookedWaitlist==1){
                    populateTable(); //Refresh table
                    JOptionPane.showMessageDialog(this, "Set Amount and Emails have been sent to the fans in waitlist.");
                }
                
                statement.close();
                connection.close();

                /* 刷新表 */
            } catch (ClassNotFoundException| SQLException e) {
                JOptionPane.showMessageDialog(this, "You need to check before set price.");
                return;
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "You need to check before set price.");
                return;
        }
    }//GEN-LAST:event_btnSetAmountActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicketManagerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicketManagerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicketManagerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicketManagerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicketManagerJFrame().setVisible(true);
            }
        });
    }
    private void populateTable() {
               // TODO add your handling code here:
                                                  
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tbMatchSearch.getModel();//生成table
        model.setRowCount(0);
        
        
        try {
                /* create jdbc connection */
                Class.forName("com.mysql.cj.jdbc.Driver");
                
                String url = "jdbc:mysql://localhost:3306/premierleague?zeroDateTimeBehavior=CONVERT_TO_NULL";
                String username = "root";
                
                String password = "abcd1234!";
                Connection connection = DriverManager.getConnection(url, username, password);
                Statement statement = connection.createStatement();
                
                /* get matchliset in these dates */
                String sqlMatList = "SELECT * FROM match_info"; 
                
                ResultSet resultSet = statement.executeQuery(sqlMatList);   //搭配select使用，其他update什么的都不用
                
                while(resultSet.next()){
                Object[] row = new Object[6];
                row[0] = String.valueOf(resultSet.getObject("date"));//添加内容
                row[1] = String.valueOf(resultSet.getObject("home"));
                row[2] = String.valueOf(resultSet.getObject("away"));
                row[3] = String.valueOf(resultSet.getObject("price"));
                row[4] = String.valueOf(resultSet.getObject("price_amount"));
                row[5] = String.valueOf(resultSet.getObject("left_amount"));

                model.addRow(row);///添加的命令
                }
                
                resultSet.close();//close  搭配select使用，其他update什么的都不用
                statement.close();
                connection.close();
            } catch (ClassNotFoundException | SQLException e) {
                JOptionPane.showMessageDialog(this, "There is no match");
                return;
            }
    }
    
    /*发送邮件*/
    public static void sendEmail(String receiveMailAccount) throws Exception {
        // 1. 创建参数配置, 用于连接邮件服务器的参数配置
        Properties props = new Properties();                    // 参数配置
        props.setProperty("mail.transport.protocol", "smtp");   // 使用的协议（JavaMail规范要求）
        props.setProperty("mail.smtp.host", "smtp.126.com");   // 发件人的邮箱的 SMTP 服务器地址
        props.setProperty("mail.smtp.auth", "true");            // 需要请求认证
        Random random = new Random();
        String strVerificationCode = "";
        for (int i = 0; i < 6; i++){
            strVerificationCode= strVerificationCode + (random.nextInt(10));
            }
        // PS: 某些邮箱服务器要求 SMTP 连接需要使用 SSL 安全认证 (为了提高安全性, 邮箱支持SSL连接, 也可以自己开启),
        //     如果无法连接邮件服务器, 仔细查看控制台打印的 log, 如果有有类似 “连接失败, 要求 SSL 安全连接” 等错误,
        //     打开下面 /* ... */ 之间的注释代码, 开启 SSL 安全连接。
        /*
        // SMTP 服务器的端口 (非 SSL 连接的端口一般默认为 25, 可以不添加, 如果开启了 SSL 连接,
        //                  需要改为对应邮箱的 SMTP 服务器的端口, 具体可查看对应邮箱服务的帮助,
        //                  QQ邮箱的SMTP(SLL)端口为465或587, 其他邮箱自行去查看)
        final String smtpPort = "465";
        props.setProperty("mail.smtp.port", smtpPort);
        props.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        props.setProperty("mail.smtp.socketFactory.fallback", "false");
        props.setProperty("mail.smtp.socketFactory.port", smtpPort);
        */

        // 2. 根据配置创建会话对象, 用于和邮件服务器交互
        Session session = Session.getInstance(props);
        session.setDebug(true);                                 // 设置为debug模式, 可以查看详细的发送 log

        // 3. 创建一封邮件
        MimeMessage message = createMimeMessage(session, "yidianhaoranlv@126.com", receiveMailAccount);

        // 4. 根据 Session 获取邮件传输对象
        Transport transport = session.getTransport();

        // 5. 使用 邮箱账号 和 密码 连接邮件服务器, 这里认证的邮箱必须与 message 中的发件人邮箱一致, 否则报错
        // 
        //    PS_01: 成败的判断关键在此一句, 如果连接服务器失败, 都会在控制台输出相应失败原因的 log,
        //           仔细查看失败原因, 有些邮箱服务器会返回错误码或查看错误类型的链接, 根据给出的错误
        //           类型到对应邮件服务器的帮助网站上查看具体失败原因。
        //
        //    PS_02: 连接失败的原因通常为以下几点, 仔细检查代码:
        //           (1) 邮箱没有开启 SMTP 服务;
        //           (2) 邮箱密码错误, 例如某些邮箱开启了独立密码;
        //           (3) 邮箱服务器要求必须要使用 SSL 安全连接;
        //           (4) 请求过于频繁或其他原因, 被邮件服务器拒绝服务;
        //           (5) 如果以上几点都确定无误, 到邮件服务器网站查找帮助。
        //
        //    PS_03: 仔细看log, 认真看log, 看懂log, 错误原因都在log已说明。
        transport.connect("yidianhaoranlv@126.com", "VTBKCYNTNIIYHNVU");

        // 6. 发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人
        transport.sendMessage(message, message.getAllRecipients());

        // 7. 关闭连接
        transport.close();
    }
    /*邮件内容*/
    private static MimeMessage createMimeMessage(Session session, String sendMail, String receiveMail) throws Exception {
            // 1. 创建一封邮件
            MimeMessage message = new MimeMessage(session);

            // 2. From: 发件人（昵称有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改昵称）
            message.setFrom(new InternetAddress(sendMail, "PremierLeagueTicketSystem", "UTF-8"));

            // 3. To: 收件人（可以增加多个收件人、抄送、密送）
            message.setRecipient(MimeMessage.RecipientType.TO, new InternetAddress(receiveMail, "Customer", "UTF-8"));

            // 4. Subject: 邮件主题（标题有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改标题）
            message.setSubject("PremierLeague Tickets Available To Pay", "UTF-8");


            // 5. Content: 邮件正文（可以使用html标签）（内容有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改发送内容）
            message.setContent("Thank you for waiting fot the tickets. Now there are tickets available to pay!", "text/html;charset=UTF-8");

            // 6. 设置发件时间
            message.setSentDate(new Date());

            // 7. 保存设置
            message.saveChanges();

            return message;
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JPanel ManageTicketJPanel;
    private javax.swing.JSplitPane TicketManagerSplitPane;
    private javax.swing.JButton btnSetAmount;
    private javax.swing.JButton btnSetPrice;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_Account;
    private javax.swing.JTable tbMatchSearch;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
}
