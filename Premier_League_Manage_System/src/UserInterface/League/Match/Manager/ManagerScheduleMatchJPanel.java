/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.League.Match.Manager;

import UserInterface.Club.Health.Doctor.*;
import TheClub.Health.Doctor.Doctor;
import TheLeague.Match.Manager.Manager;
import TheSystem.Common.Person.Person;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
//import java.awt.Image;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*; 
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
//import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.util.Random;
//import javax.swing.ButtonModel;
//import javax.swing.JButton;

/**
 *
 * @author Jiafeng
 */
public class ManagerScheduleMatchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorHistoryJPanel
     */
    Person manager;
    ArrayList<Match> MatchCataFirstHalf;
    ArrayList<Match> MatchCataSecondHalf;
//    int appointmentHistoryID;
//    String appointmentHistoryPlayerUserName;
//    String appointmentHistoryPlayerName;
    
    
    public static final String Referee1 = "James";
    public static final String Referee2 = "Robert";
    public static final String Referee3 = "John";
    public static final String Referee4 = "Michael";
    public static final String Referee5 = "David";
    public static final String Referee6 = "William";
    public static final String Referee7 = "Richard";
    public static final String Referee8 = "Joseph";
    public static final String Referee9 = "Thomas";
    public static final String Referee10 = "Charles";
    
   
    public ManagerScheduleMatchJPanel(Person managerTemp) {
        initComponents();
        this.manager = managerTemp;
        
//        fillingAppointmentHistoryTable();
        
        Enumeration<AbstractButton> button;
        AbstractButton buttonChoose; //buttonChoose = jButton1 is true
        
        button=justSetColor.getElements();
        for(int i=0;i<justSetColor.getButtonCount();i++)
        {
              buttonChoose=button.nextElement();
              buttonChoose.setBackground(new java.awt.Color(255, 255, 255));
              buttonChoose.setForeground(Color.black);
            
        }
        
        automaticMatchGenerationButton.setEnabled(true);
        beginYearjTextField.setEnabled(true);
        beginMonthjTextField.setEnabled(true);
        beginDayjTextField.setEnabled(true);
        
        selectMatchButton.setEnabled(false);
        
        
        RefereeComboBox.setSelectedIndex(-1);
        RefereeComboBox.setEnabled(false);
        
        saveMatchButton.setEnabled(false);
        editSelectedMatchButton.setEnabled(false);
        freshMatchButton.setEnabled(false);
        submitMatchButton.setEnabled(false);
        
        
        homejTextField.setEnabled(false);
        awayjTextField.setEnabled(false);
        datejTextField.setEnabled(false);
        refereejTextField.setEnabled(false);
        
        matchFirstTable.setEnabled(false);
        matchSecondTable.setEnabled(false); 
        
        homejTextField.setEnabled(false);
        awayjTextField.setEnabled(false);
        datejTextField.setEnabled(false);
        refereejTextField.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        justSetColor = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        matchFirstTable = new javax.swing.JTable();
        beginYearjTextField = new javax.swing.JTextField();
        awayjTextField = new javax.swing.JTextField();
        datejTextField = new javax.swing.JTextField();
        freshMatchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        matchSecondTable = new javax.swing.JTable();
        saveMatchButton = new javax.swing.JButton();
        submitMatchButton = new javax.swing.JButton();
        RefereeComboBox = new javax.swing.JComboBox<>();
        selectMatchButton = new javax.swing.JButton();
        editSelectedMatchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        refereejTextField = new javax.swing.JTextField();
        automaticMatchGenerationButton = new javax.swing.JButton();
        homejTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        beginMonthjTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        beginDayjTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 139, 69));
        setMaximumSize(new java.awt.Dimension(700, 600));
        setMinimumSize(new java.awt.Dimension(700, 600));
        setPreferredSize(new java.awt.Dimension(700, 600));

        matchFirstTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Home", "Away", "Date", "Referee"
            }
        ));
        matchFirstTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        matchFirstTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                matchFirstTableFocusGained(evt);
            }
        });
        matchFirstTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                matchFirstTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(matchFirstTable);

        beginYearjTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        beginYearjTextField.setMinimumSize(new java.awt.Dimension(64, 25));
        beginYearjTextField.setPreferredSize(new java.awt.Dimension(64, 25));

        awayjTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        awayjTextField.setMinimumSize(new java.awt.Dimension(64, 25));
        awayjTextField.setPreferredSize(new java.awt.Dimension(64, 25));

        datejTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        datejTextField.setMinimumSize(new java.awt.Dimension(64, 25));
        datejTextField.setPreferredSize(new java.awt.Dimension(64, 25));

        freshMatchButton.setText("<html>Fresh<br/>Table</html>");
        freshMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freshMatchButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Home:");

        jLabel16.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Away:");

        jLabel15.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Date:");

        jLabel14.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Soccer Match Schedule");

        matchSecondTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Home", "Away", "Date", "Referee"
            }
        ));
        matchSecondTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        matchSecondTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                matchSecondTableFocusGained(evt);
            }
        });
        matchSecondTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                matchSecondTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(matchSecondTable);

        saveMatchButton.setText("Save");
        saveMatchButton.setMaximumSize(new java.awt.Dimension(80, 28));
        saveMatchButton.setMinimumSize(new java.awt.Dimension(80, 28));
        saveMatchButton.setPreferredSize(new java.awt.Dimension(80, 28));
        saveMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMatchButtonActionPerformed(evt);
            }
        });

        submitMatchButton.setText("Submit");
        submitMatchButton.setMaximumSize(new java.awt.Dimension(80, 28));
        submitMatchButton.setMinimumSize(new java.awt.Dimension(80, 28));
        submitMatchButton.setPreferredSize(new java.awt.Dimension(80, 28));
        submitMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitMatchButtonActionPerformed(evt);
            }
        });

        RefereeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "James", "Robert", "John", "Michael", "David", "William", "Richard", "Joseph", "Thomas", "Charles" }));
        RefereeComboBox.setSelectedIndex(-1);
        RefereeComboBox.setMinimumSize(new java.awt.Dimension(76, 25));
        RefereeComboBox.setPreferredSize(new java.awt.Dimension(76, 25));

        selectMatchButton.setText("<html>Select One<br/>&nbsp&nbsp&nbsp Match</html>");
        selectMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectMatchButtonActionPerformed(evt);
            }
        });

        editSelectedMatchButton.setText("<html>Edit Selected<br/>&nbsp&nbsp&nbsp&nbsp&nbsp Match</html>");
        editSelectedMatchButton.setActionCommand("<html>Edit Selected<br/>Match</html>");
        editSelectedMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSelectedMatchButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Referee:");

        refereejTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        refereejTextField.setMinimumSize(new java.awt.Dimension(64, 25));
        refereejTextField.setPreferredSize(new java.awt.Dimension(64, 25));

        automaticMatchGenerationButton.setText("<html>Automatic Match<br/>&nbsp&nbsp&nbsp Generation</html>");
        automaticMatchGenerationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automaticMatchGenerationButtonActionPerformed(evt);
            }
        });

        homejTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        homejTextField.setMinimumSize(new java.awt.Dimension(64, 25));
        homejTextField.setPreferredSize(new java.awt.Dimension(64, 25));

        jLabel3.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("BeginYear:");

        jLabel4.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("BeginMonth:");

        beginMonthjTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        beginMonthjTextField.setMinimumSize(new java.awt.Dimension(64, 25));
        beginMonthjTextField.setPreferredSize(new java.awt.Dimension(64, 25));

        jLabel5.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("BeginDay:");

        beginDayjTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        beginDayjTextField.setMinimumSize(new java.awt.Dimension(64, 25));
        beginDayjTextField.setPreferredSize(new java.awt.Dimension(64, 25));

        jLabel6.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Second half of the Match season:");

        jLabel7.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("First half of the Match season:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel3)
                                                    .addGap(20, 20, 20))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(jLabel4)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(beginYearjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(beginMonthjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(beginDayjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(automaticMatchGenerationButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jLabel6)))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(freshMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(homejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel15)
                                            .addComponent(datejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(30, 30, 30)
                                            .addComponent(refereejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(28, 28, 28)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(awayjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel16)))))
                                .addComponent(selectMatchButton)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(120, 120, 120)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(RefereeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(editSelectedMatchButton)
                                .addComponent(saveMatchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(submitMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(jLabel14)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(homejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(awayjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(38, 38, 38)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refereejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(RefereeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editSelectedMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(submitMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(freshMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(beginYearjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(beginMonthjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(beginDayjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(automaticMatchGenerationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void freshMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freshMatchButtonActionPerformed
DefaultTableModel model1 = (DefaultTableModel) matchFirstTable.getModel();
        model1.setRowCount(0);
        
        DefaultTableModel model2 = (DefaultTableModel) matchSecondTable.getModel();
        model2.setRowCount(0);
        
        
        
        for(int i = 0; i < MatchCataFirstHalf.size();i++){
                
            Object[] row = new Object[4];

            row[0] = MatchCataFirstHalf.get(i).match_away;

            row[1] = MatchCataFirstHalf.get(i).match_home;

            row[2] = MatchCataFirstHalf.get(i).date;

            row[3] = MatchCataFirstHalf.get(i).referee;

            model1.addRow(row);
        }
        for(int i = 0; i < MatchCataSecondHalf.size();i++){
            Object[] row = new Object[4];

            row[0] = MatchCataSecondHalf.get(i).match_away;

            row[1] = MatchCataSecondHalf.get(i).match_home;

            row[2] = MatchCataSecondHalf.get(i).date;

            row[3] = MatchCataSecondHalf.get(i).referee;

            model2.addRow(row);
        } 

    }//GEN-LAST:event_freshMatchButtonActionPerformed

    private void saveMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMatchButtonActionPerformed
        // TODO add your handling code here:
        
        if(RefereeComboBox.getSelectedIndex()!=-1){
            refereejTextField.setText(RefereeComboBox.getSelectedItem().toString());
        }
        int selectedRowIndexFirstTable = this.matchFirstTable.getSelectedRow();
        int selectedRowIndexSecondTable = this.matchSecondTable.getSelectedRow();
         if(selectedRowIndexFirstTable>=0){
             MatchCataFirstHalf.get(selectedRowIndexFirstTable).setMatch_home(homejTextField.getText());
             MatchCataFirstHalf.get(selectedRowIndexFirstTable).setMatch_away(awayjTextField.getText());
             MatchCataFirstHalf.get(selectedRowIndexFirstTable).setDate(datejTextField.getText());
             MatchCataFirstHalf.get(selectedRowIndexFirstTable).setReferee(refereejTextField.getText());
         }
         if(selectedRowIndexSecondTable>=0){
             MatchCataSecondHalf.get(selectedRowIndexSecondTable).setMatch_home(homejTextField.getText());
             MatchCataSecondHalf.get(selectedRowIndexSecondTable).setMatch_away(awayjTextField.getText());
             MatchCataSecondHalf.get(selectedRowIndexSecondTable).setDate(datejTextField.getText());
             MatchCataSecondHalf.get(selectedRowIndexSecondTable).setReferee(refereejTextField.getText());
         }
         
        automaticMatchGenerationButton.setEnabled(false);
        beginYearjTextField.setEnabled(false);
        beginMonthjTextField.setEnabled(false);
        beginDayjTextField.setEnabled(false);
        
        selectMatchButton.setEnabled(false);
        
        
        RefereeComboBox.setSelectedIndex(-1);
        RefereeComboBox.setEnabled(false);
        
        saveMatchButton.setEnabled(false);
        editSelectedMatchButton.setEnabled(true);
        freshMatchButton.setEnabled(true);
        submitMatchButton.setEnabled(true);
        
        
        homejTextField.setEnabled(false);
        awayjTextField.setEnabled(false);
        datejTextField.setEnabled(false);
        refereejTextField.setEnabled(false);
        
        matchFirstTable.setEnabled(false);
        matchSecondTable.setEnabled(false);
         
    }//GEN-LAST:event_saveMatchButtonActionPerformed

    private void submitMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitMatchButtonActionPerformed
        // TODO add your handling code here:
        for(int i = 0; i < this.MatchCataFirstHalf.size();i++){
            try{
                Class.forName("com.mysql.cj.jdbc.Driver");
                String url = "jdbc:mysql://localhost:3306/premierleague";
                String username = "root";
                String password = "abcd1234!";
                Connection connection = DriverManager.getConnection(url, username, password);
                Statement statement = connection.createStatement();

                String sql = "INSERT INTO match_info (home, away, date, referee) VALUES ("+
                             "\'"+MatchCataFirstHalf.get(i).getMatch_home()+"\', "+
                             "\'"+MatchCataFirstHalf.get(i).getMatch_away()+"\', "+
                             "\'"+MatchCataFirstHalf.get(i).getDate()+"\', "+
                             "\'"+MatchCataFirstHalf.get(i).getReferee()+"\')";
                statement.executeUpdate(sql);
                statement.close();
                connection.close();
            }
            catch(ClassNotFoundException | SQLException e)
            {
                e.printStackTrace();
            }
        }
        
        for(int i = 0; i < this.MatchCataSecondHalf.size();i++){
            try{
                Class.forName("com.mysql.cj.jdbc.Driver");
                String url = "jdbc:mysql://localhost:3306/premierleague";
                String username = "root";
                String password = "abcd1234!";
                Connection connection = DriverManager.getConnection(url, username, password);
                Statement statement = connection.createStatement();

                String sql = "INSERT INTO match_info (home, away, date, referee) VALUES ("+
                             "\'"+MatchCataSecondHalf.get(i).getMatch_home()+"\', "+
                             "\'"+MatchCataSecondHalf.get(i).getMatch_away()+"\', "+
                             "\'"+MatchCataSecondHalf.get(i).getDate()+"\', "+
                             "\'"+MatchCataSecondHalf.get(i).getReferee()+"\')";
                statement.executeUpdate(sql);
                statement.close();
                connection.close();
            }
            catch(ClassNotFoundException | SQLException e)
            {
                e.printStackTrace();
            }
        }
         automaticMatchGenerationButton.setEnabled(false);
        beginYearjTextField.setEnabled(false);
        beginMonthjTextField.setEnabled(false);
        beginDayjTextField.setEnabled(false);
        
        selectMatchButton.setEnabled(false);
        
        
        RefereeComboBox.setEnabled(false);
        
        saveMatchButton.setEnabled(false);
        editSelectedMatchButton.setEnabled(false);
        freshMatchButton.setEnabled(false);
        submitMatchButton.setEnabled(false);
        
        
        homejTextField.setEnabled(false);
        awayjTextField.setEnabled(false);
        datejTextField.setEnabled(false);
        refereejTextField.setEnabled(false);
        
        matchFirstTable.setEnabled(false);
        matchSecondTable.setEnabled(false);
        
        RefereeComboBox.setSelectedIndex(-1);

    }//GEN-LAST:event_submitMatchButtonActionPerformed

    private void selectMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectMatchButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndexFirstTable = this.matchFirstTable.getSelectedRow();
        int selectedRowIndexSecondTable = this.matchSecondTable.getSelectedRow();
        
        if((selectedRowIndexFirstTable<0) &&(selectedRowIndexSecondTable<0) ){
            JOptionPane.showMessageDialog(selectMatchButton, "Please select a match first!");
            return;
        }
        DefaultTableModel model1 = (DefaultTableModel) this.matchFirstTable.getModel();
        DefaultTableModel model2 = (DefaultTableModel) this.matchSecondTable.getModel();
        if(selectedRowIndexFirstTable>=0){
            homejTextField.setText(String.valueOf(model1.getValueAt(selectedRowIndexFirstTable, 0)));
            awayjTextField.setText(String.valueOf(model1.getValueAt(selectedRowIndexFirstTable, 1)));
            datejTextField.setText(String.valueOf(model1.getValueAt(selectedRowIndexFirstTable, 2)));
            refereejTextField.setText(String.valueOf(model1.getValueAt(selectedRowIndexFirstTable, 3)));
            this.matchSecondTable.clearSelection();
        }
        if(selectedRowIndexSecondTable>=0){
            homejTextField.setText(String.valueOf(model2.getValueAt(selectedRowIndexSecondTable, 0)));
            awayjTextField.setText(String.valueOf(model2.getValueAt(selectedRowIndexSecondTable, 1)));
            datejTextField.setText(String.valueOf(model2.getValueAt(selectedRowIndexSecondTable, 2)));
            refereejTextField.setText(String.valueOf(model2.getValueAt(selectedRowIndexSecondTable, 3)));
            this.matchFirstTable.clearSelection();
        }
        automaticMatchGenerationButton.setEnabled(false);
        beginYearjTextField.setEnabled(false);
        beginMonthjTextField.setEnabled(false);
        beginDayjTextField.setEnabled(false);
        
        selectMatchButton.setEnabled(false);
        
        
        RefereeComboBox.setEnabled(true);
        
        saveMatchButton.setEnabled(true);
        editSelectedMatchButton.setEnabled(true);
        freshMatchButton.setEnabled(false);
        submitMatchButton.setEnabled(false);
        
        
        homejTextField.setEnabled(false);
        awayjTextField.setEnabled(false);
        datejTextField.setEnabled(false);
        refereejTextField.setEnabled(false);
        
        matchFirstTable.setEnabled(false);
        matchSecondTable.setEnabled(false);
        
        RefereeComboBox.setSelectedIndex(-1);
        
    }//GEN-LAST:event_selectMatchButtonActionPerformed

    private void editSelectedMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSelectedMatchButtonActionPerformed
        // TODO add your handling code here:
        automaticMatchGenerationButton.setEnabled(true);
        beginYearjTextField.setEnabled(true);
        beginMonthjTextField.setEnabled(true);
        beginDayjTextField.setEnabled(true);
        
        selectMatchButton.setEnabled(true);
        
        
        RefereeComboBox.setEnabled(true);
        
        saveMatchButton.setEnabled(false);
        editSelectedMatchButton.setEnabled(false);
        freshMatchButton.setEnabled(false);
        submitMatchButton.setEnabled(false);
        
        
        homejTextField.setEnabled(true);
        awayjTextField.setEnabled(true);
        datejTextField.setEnabled(true);
        refereejTextField.setEnabled(true);
        
        matchFirstTable.setEnabled(true);
        matchSecondTable.setEnabled(true);
        
        RefereeComboBox.setSelectedIndex(-1);
    }//GEN-LAST:event_editSelectedMatchButtonActionPerformed

    public class Match{
        String match_home;
        String match_away;
        String date;
        String referee;

        public Match(String match_home, String match_away) {
            this.match_home = match_home;
            this.match_away = match_away;
        }

        public String getMatch_home() {
            return match_home;
        }

        public void setMatch_home(String match_home) {
            this.match_home = match_home;
        }

        public String getMatch_away() {
            return match_away;
        }

        public void setMatch_away(String match_away) {
            this.match_away = match_away;
        }

        public String getDate() {
            return date;
        }

        public void setDate(String date) {
            this.date = date;
        }

        public String getReferee() {
            return referee;
        }

        public void setReferee(String referee) {
            this.referee = referee;
        }
        
    }
    
    private boolean containNumber(String a){
        boolean flag = false;
        
        for(int i = 0;i<a.length();i++){
            char c = a.charAt(i);
            
            if(c>48 & c<57){
                flag = true;
                
            }
        }
        return flag;
    }
    
    private boolean containLetter(String a){
        boolean flag = false;
        for(int i = 0;i<a.length();i++){
            char c = a.charAt(i);
            if(!Character.isDigit(c)){
                flag = true;
            }
        }
        return flag;
    } 
    
    private void automaticMatchGenerationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automaticMatchGenerationButtonActionPerformed
        // TODO add your handling code here:
//        this.PlayerCata = new ArrayList<Player>();
        ArrayList<String> ClubCata;
        ArrayList<String> refereeTemp;
//        ArrayList<Match> MatchCataFirstHalf;
//        ArrayList<Match> MatchCataSecondHalf;
        
        
        
        ClubCata = new ArrayList<String>();
        refereeTemp = new ArrayList<String>();
        
        refereeTemp.add(Referee1);
        refereeTemp.add(Referee2);
        refereeTemp.add(Referee3);
        refereeTemp.add(Referee4);
        refereeTemp.add(Referee5);
        refereeTemp.add(Referee6);
        refereeTemp.add(Referee7);
        refereeTemp.add(Referee8);
        refereeTemp.add(Referee9);
        refereeTemp.add(Referee10);
        
        this.MatchCataFirstHalf = new ArrayList<Match>();
        this.MatchCataSecondHalf = new ArrayList<Match>();
        int yearBegin = 0;
        int monthBeigin = 0;
        int dayBeigin = 0;
        
        try{
            yearBegin = Integer.parseInt(beginYearjTextField.getText());
            monthBeigin = Integer.parseInt(beginMonthjTextField.getText());
            dayBeigin = Integer.parseInt( beginDayjTextField.getText());
        }
        catch(NumberFormatException e){
//             System.out.println("not a number"); 
        }
       if(!this.containNumber(beginYearjTextField.getText())){
           JOptionPane.showMessageDialog(automaticMatchGenerationButton, "Please enter correct STYLE!");
       }else{
           if(!this.containNumber(beginMonthjTextField.getText())){JOptionPane.showMessageDialog(automaticMatchGenerationButton, "Please enter correct STYLE!");}
           else{
               if(!this.containNumber(beginDayjTextField.getText())){JOptionPane.showMessageDialog(automaticMatchGenerationButton, "Please enter correct STYLE!");}
               else{
                   

        
        
        if(((yearBegin<2000)||(yearBegin>3000))||(((monthBeigin)>12)||((monthBeigin)<0))||(((dayBeigin)>30)||((dayBeigin)<0))){
            JOptionPane.showMessageDialog(automaticMatchGenerationButton, "We just support 2000 to 3000 and not suppot day=31");
        }
        else{
//            int yearBegin = Integer.parseInt(beginYearjTextField.getText());
//            int monthBeigin = Integer.parseInt(beginMonthjTextField.getText());
//            int dayBeigin = Integer.parseInt( beginDayjTextField.getText());
            
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Calendar calendar = Calendar.getInstance();
            calendar.set(Calendar.YEAR, yearBegin);
            calendar.set(Calendar.MONTH, monthBeigin);
            calendar.set(Calendar.DATE, dayBeigin);
            
//            calendar.add(Calendar.DAY_OF_MONTH, 6);
//            String dateTemp = sdf.format(calendar.getTime());

            try{
                Class.forName("com.mysql.cj.jdbc.Driver");
                String url = "jdbc:mysql://localhost:3306/premierleague";
                String username = "root";
                String password = "abcd1234!";
                Connection connection = DriverManager.getConnection(url, username, password);
                Statement statement = connection.createStatement();

                String sql ="SELECT DISTINCT club FROM system_user_info WHERE "
                            + "(club IS NOT NULL) "
                            + "AND (club !=\'\');";

                ResultSet resultSet = statement.executeQuery(sql);

                //作为中间变量，便于将变量导入对象中 需要知道在哪个企业 负责哪个角色 且所属club是哪个
                //As an intermediate variable, it is easy to import the variables into the object. 
                //You need to know which company is responsible for which role and which club you belong to.
                String clubTemp = "";
                while(resultSet.next()){
                    clubTemp = resultSet.getString("club");
                    ClubCata.add(clubTemp);
    //                System.out.println(clubTemp);
                }
            }
            catch(ClassNotFoundException | SQLException e)
            {
                e.printStackTrace();
            }
    //        System.out.println(ClubCata.size());
    //System.out.println(" ORIGIN 1   ");
            for(int i =0; i<(ClubCata.size());i++)
            {
                for(int j = i+1 ; j<(ClubCata.size());j++){
                     Match matchTemp = new Match(ClubCata.get(i),ClubCata.get(j));
                     this.MatchCataFirstHalf.add(matchTemp);
//                     System.out.println(matchTemp.getMatch_home()+" "+matchTemp.getMatch_away());
                }
            }
    //System.out.println(" ORIGIN 2   ");
            for(int i = (ClubCata.size()-1); i>-1;i--)
            {
                for(int j = i-1 ; j>-1;j--){
                     Match matchTemp = new Match(ClubCata.get(i),ClubCata.get(j));
                     this.MatchCataSecondHalf.add(matchTemp);
//                     System.out.println(matchTemp.getMatch_home()+" "+matchTemp.getMatch_away());
                }
            }

    //        System.out.println(" 1111111111111111111   ");

            Random random1 = new Random();
            Random random2 = new Random();
            Random random3 = new Random();
            Random random4 = new Random();
            
            
            for(int i = 0; i < this.MatchCataFirstHalf.size();i++)
            {
                int r1 = random1.nextInt(this.MatchCataFirstHalf.size());
                Match temp;
                temp = this.MatchCataFirstHalf.get(i);
                this.MatchCataFirstHalf.set(i, this.MatchCataFirstHalf.get(r1));
                this.MatchCataFirstHalf.set(r1, temp);

            }
            for(int i = 0; i < this.MatchCataFirstHalf.size();i++)
            {
                calendar.add(Calendar.DATE, 6);
                String dateTemp = sdf.format(calendar.getTime());
                this.MatchCataFirstHalf.get(i).setDate(dateTemp);
                this.MatchCataFirstHalf.get(i).setReferee(refereeTemp.get(random2.nextInt(refereeTemp.size())));
            }
            
            
            
            
            for(int i = 0; i < this.MatchCataSecondHalf.size();i++)
            {
                int r1 = random3.nextInt(this.MatchCataSecondHalf.size());
                Match temp;
                temp = this.MatchCataSecondHalf.get(i);
                this.MatchCataSecondHalf.set(i, this.MatchCataSecondHalf.get(r1));
                this.MatchCataSecondHalf.set(r1, temp);

            }
            for(int i = 0; i < this.MatchCataSecondHalf.size();i++)
            {
                calendar.add(Calendar.DATE, 6);
                String dateTemp = sdf.format(calendar.getTime());
                this.MatchCataSecondHalf.get(i).setDate(dateTemp);
                this.MatchCataSecondHalf.get(i).setReferee(refereeTemp.get(random4.nextInt(refereeTemp.size())));
            }
                    automaticMatchGenerationButton.setEnabled(false);
                    beginYearjTextField.setEnabled(false);
                    beginMonthjTextField.setEnabled(false);
                    beginDayjTextField.setEnabled(false);

                    selectMatchButton.setEnabled(true);


                    RefereeComboBox.setEnabled(false);

                    saveMatchButton.setEnabled(false);
                    editSelectedMatchButton.setEnabled(false);
                    freshMatchButton.setEnabled(false);
                    submitMatchButton.setEnabled(true);


                    homejTextField.setEnabled(false);
                    awayjTextField.setEnabled(false);
                    datejTextField.setEnabled(false);
                    refereejTextField.setEnabled(false);

                    matchFirstTable.setEnabled(true);
                    matchSecondTable.setEnabled(true);
   }
        
        
        
        

        DefaultTableModel model1 = (DefaultTableModel) matchFirstTable.getModel();
        model1.setRowCount(0);
        
        DefaultTableModel model2 = (DefaultTableModel) matchSecondTable.getModel();
        model2.setRowCount(0);
        
        
        
        for(int i = 0; i < MatchCataFirstHalf.size();i++){
                
            Object[] row = new Object[4];

            row[0] = MatchCataFirstHalf.get(i).match_away;

            row[1] = MatchCataFirstHalf.get(i).match_home;

            row[2] = MatchCataFirstHalf.get(i).date;

            row[3] = MatchCataFirstHalf.get(i).referee;

            model1.addRow(row);
        }
        for(int i = 0; i < MatchCataSecondHalf.size();i++){
            Object[] row = new Object[4];

            row[0] = MatchCataSecondHalf.get(i).match_away;

            row[1] = MatchCataSecondHalf.get(i).match_home;

            row[2] = MatchCataSecondHalf.get(i).date;

            row[3] = MatchCataSecondHalf.get(i).referee;

            model2.addRow(row);
        }

                   }
           }
       }    
    }//GEN-LAST:event_automaticMatchGenerationButtonActionPerformed

    private void matchFirstTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_matchFirstTableMouseClicked
        // TODO add your handling code here:
        this.matchSecondTable.clearSelection();
    }//GEN-LAST:event_matchFirstTableMouseClicked

    private void matchSecondTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_matchSecondTableMouseClicked
        // TODO add your handling code here:
        this.matchFirstTable.clearSelection();
    }//GEN-LAST:event_matchSecondTableMouseClicked

    private void matchFirstTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_matchFirstTableFocusGained
        // TODO add your handling code here:
        this.matchSecondTable.clearSelection();
    }//GEN-LAST:event_matchFirstTableFocusGained

    private void matchSecondTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_matchSecondTableFocusGained
        // TODO add your handling code here:
        this.matchFirstTable.clearSelection();
    }//GEN-LAST:event_matchSecondTableFocusGained

    
    private void fillingAppointmentHistoryTable() {
//        DefaultTableModel model = (DefaultTableModel) appointmentHistoryTable.getModel();
//        model.setRowCount(0);
//        try{
//            Class.forName("com.mysql.cj.jdbc.Driver");
//            String url = "jdbc:mysql://localhost:3306/premierleague";
//            String username = "root";
//            String password = "abcd1234!";
//            Connection connection = DriverManager.getConnection(url, username, password);
//            Statement statement = connection.createStatement();
//            
//            String sql = "SELECT * FROM club_diagnose_appointment WHERE "+
//                         "doctor_id=\'"+this.doctor.getUsername()+"\'";
//            ResultSet resultSet = statement.executeQuery(sql);
//            
//            while(resultSet.next()){
//                String playerUsernameTemp;
//                String playerNameTemp = null;
//                
//                Object[] row = new Object[6];
//                
//                row[0] = resultSet.getObject("id");
//                
//                row[1] = this.doctor.getName();
//
//                String playerUsername = resultSet.getObject("player_id").toString();        
//                int length1 = doctor.getTeam().getPlayerCatalog().getPlayerCata().size();
//                for(int i=0;i<length1;i++){
//                        playerUsernameTemp=doctor.getTeam().getPlayerCatalog().getPlayerCata().get(i).getUsername();
//                        playerNameTemp=doctor.getTeam().getPlayerCatalog().getPlayerCata().get(i).getName();
//                    if(playerUsernameTemp.equals(playerUsername)){
//                         break;
//                     }
//                 }
//                row[2] = playerNameTemp;
//               
//                row[3] = resultSet.getObject("date");
//                row[4] = resultSet.getObject("status");
//                row[5] = resultSet.getObject("result");
//                model.addRow(row);
//          }
//            resultSet.close();
//            statement.close();
//            connection.close();
//        }
//        catch(ClassNotFoundException | SQLException e)
//        {
//            e.printStackTrace();
//        } 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> RefereeComboBox;
    private javax.swing.JButton automaticMatchGenerationButton;
    private javax.swing.JTextField awayjTextField;
    private javax.swing.JTextField beginDayjTextField;
    private javax.swing.JTextField beginMonthjTextField;
    private javax.swing.JTextField beginYearjTextField;
    private javax.swing.JTextField datejTextField;
    private javax.swing.JButton editSelectedMatchButton;
    private javax.swing.JButton freshMatchButton;
    private javax.swing.JTextField homejTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.ButtonGroup justSetColor;
    private javax.swing.JTable matchFirstTable;
    private javax.swing.JTable matchSecondTable;
    private javax.swing.JTextField refereejTextField;
    private javax.swing.JButton saveMatchButton;
    private javax.swing.JButton selectMatchButton;
    private javax.swing.JButton submitMatchButton;
    // End of variables declaration//GEN-END:variables
}
